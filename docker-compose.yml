version: '3.8'

services:

  caddy:
    build:
      context: .
      dockerfile: Dockerfile.caddy
    ports:
      - "8080:8080"
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  frontend:
    image: node:22
    working_dir: /app
    volumes:
      - ./front:/app
    command: >
      sh -c "npm install && npm run build"
    ports:
      - "3000:3000"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3

  backend:
    image: golang:latest
    depends_on:
      - db
    working_dir: /app
    volumes:
      - .:/app
      - ./internal/database/migrations:/app/internal/database/migrations
    command: go run cmd/socialNetwork/main.go
    ports:
      - "8081:8081"
    networks:
      - app-network

  db:
    build:
      context: ./internal/database
      dockerfile: Dockerfile
    container_name: elite_postgres
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "${DB_PORT}:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    name: app-network
    driver: bridge

volumes:
  pgdata:
